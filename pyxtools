#!/usr/bin/env python3
import sys
import traceback
from lib import args
from lib import db

dupBehavior = args.ImportDuplicateBehavior
args = args.getArgs().parse_args()

conn = db.getConnection()

def exitWithMessage(message):
    print(message);
    conn.close();
    sys.exit(1);

def createBlackCard():
    card = dict()
    if args.text == None or args.text == '':
        exitWithMessage('Specify card text for inserted black card (-t)')
    card['text'] = args.text    

    if args.draw < 0:
        exitWithMessage('Draw cannot be less than zero (-d)')
    card['draw'] = args.draw

    if args.pick <= 0:
        exitWithMessage('Pick cannot be less than or equal to zero (-p)')
    card['pick'] = args.pick

    if args.watermark == '' or args.watermark == None:
        exitWithMessage('Watermark cannot be blank (--watermark)')
    card['watermark'] = args.watermark

    return card

def createWhiteCard():
    card = dict()
    if args.text == None or args.text == '':
        exitWithMessage('Specify card text for inserted white card (-t)')
    card['text'] = args.text

    if args.watermark == '':
        exitWithMessage('Cannot have blank watermark (--watermark)')
    card['watermark'] = args.watermark

    return card

def doInsert():
    card = {
        'white': lambda: createWhiteCard(),
        'black': lambda: createBlackCard()
    }[args.cardcolor]()

    print('Are you sure you want to insert ' + args.cardcolor + ' card to card set ' \
            + str(args.cardset) + '?')
    print(str(card))
    choice = input('Y/N? ')
    if choice != 'Y' and choice != 'y':
        print('Exiting...')
        conn.close()
        sys.exit(0)
    
    {
        'white': lambda: db.insertWhiteCards([card], args.cardset, conn),
        'black': lambda: db.insertBlackCards([card], args.cardset, conn)
    }[args.cardcolor]()
    
    #conn.commit()
    print('Inserted')

def doDelete():
    db.deleteCard(args.cardcolor, args.id, conn)
    #conn.commit()
    print('Card deleted')

def doExport():
    db.backUpCardSet(args.cardset, args.filename, conn)
    print('Export successful')

def removeDuplicates(cards, duplicates):
    duplicateText = [card['text'] for card in duplicates]
    return [card for card in cards if not card['text'] in duplicateText]

def confirmLink(cardType, duplicates, shouldFail):
    skip = []
    link = []
    for card in duplicates:
        print('Found duplicate ' + cardType + 'card with text:')
        print('    ' + card['text'])
        accept = input('Link (Y/N)? ')
        if accept == 'Y' or accept == 'y':
            link.append(card)
        elif shouldFail:
            exitWithMessage('Duplicate rejected while set to fail on rejection.  Exiting...')
        else:
            skip.append(card)
    
    return { 'skip' : skip, 'link' : link }

def doImport():
    cardSet = db.readCardSet(args.filename)
    whiteDuplicates = db.getDuplicateCards('white', cardSet['white_cards'], conn)
    blackDuplicates = db.getDuplicateCards('black', cardSet['black_cards'], conn)
    toLinkWhite = None
    toLinkBlack = None
    
    if args.duplicateBehavior == dupBehavior.askAndFail.value:
        toLinkWhite = confirmLink('white', whiteDuplicates, True)
        toLinkBlack = confirmLink('black', blackDuplicates, True)
    elif args.duplicateBehavior == dupBehavior.askAndSkip.value:
        toLinkWhite = confirmLink('white', whiteDuplicates, False)
        toLinkBlack = confirmLink('black', blackDuplicates, False)
    elif args.duplicateBehavior == dupBehavior.link.value:
        toLinkWhite = { 'link': whiteDuplicates, 'skip': [] }
        toLinkBlack = { 'link': blackDuplicates, 'skip': [] }
    elif len(whiteDuplicates) > 0 or len(blackDuplicates) > 0:
        print('white duplicates:')
        for card in whiteDuplicates:
            print('{{ id: {0}, text: {1}, set: {2}}}'.format(card['id'], card['text'].encode('utf-8'), card['cardset']))
        print('black duplicates:')
        for card in blackDuplicates:
            print('{{ id: {0}, text: {1}, set: {2}}}'.format(card['id'], card['text'].encode('utf-8'), card['cardset']))
        exitWithMessage('Duplicates found and duplicate behavior set to fail! (pyxtools import -h for more options)')
    
    #Remove duplicates from main set
    cardSet['white_cards'] = removeDuplicates(cardSet['white_cards'], whiteDuplicates)    
    cardSet['black_cards'] = removeDuplicates(cardSet['black_cards'], blackDuplicates)    

    try:
        cardsetId = db.insertCardSetRecord(args.cardset, cardSet, conn)
        if len(cardSet['black_cards']) > 0:
            print('Inserting black cards...')
            db.insertBlackCards(cardSet['black_cards'], cardsetId, conn)
        if len(cardSet['white_cards']) > 0:
            print('Inserting white cards...')
            db.insertWhiteCards(cardSet['white_cards'], cardsetId, conn)
        if len(toLinkWhite) > 0:
            print('Linking pre-existing white cards...')
            db.linkExisingCards('white', [card['id'] for card in toLinkWhite['link']], cardsetId, conn)
        if len(toLinkBlack) > 0:
            print('Linking pre-existing black cards...')
            db.linkExisingCards('black', [card['id'] for card in toLinkBlack['link']], cardsetId, conn)
    except:
        conn.rollback()
        traceback.print_exc()
        exitWithMessage('Error importing cardset')
    
    #conn.commit()
    print('Import successful')

def doCardsets():
    if args.cardcolor == 'white':
        cards = db.getCardSetWhiteCards(args.cardset, conn)
        for card in cards:
            print("{{ id: {0}, text: {1}, watermark: {2} }}".format(\
                    card['id'], card['text'].encode('utf-8'), card['watermark']))
    elif args.cardcolor == 'black':
        cards = db.getCardSetBlackCards(args.cardset, conn)
        for card in cards:
            print("{{ id: {0}, text: {1}, pick: {2}, draw: {3}, watermark: {4}}}".format(\
                    card['id'], card['text'].encode('utf-8'), card['pick'], card['draw'], card['watermark']))
    else:
        sets = db.getCardSetList(conn)
        for cardset in sets:
            print(str(cardset))

#Because python has no switch
commands = {
    'insert': lambda: doInsert(),
    'delete': lambda: doDelete(),
    'export': lambda: doExport(),
    'import': lambda: doImport(),
    'cardsets': lambda: doCardsets(),
}[args.command]()

conn.close();
